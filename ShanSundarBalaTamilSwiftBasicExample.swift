import Foundation

class துள்ளி_வரும்_தாய்_மொழி {
	let என்_பெயர்: String? = try! பெறு_என்_பெயர்()!
	let பெயரின்_எண்ணிக்கைகளின்_வரிசை: [UnicodeScalar]? = try! எண்ணிக்கைகளின்_வரிசை()!
	let பெயரின்_வரிவடிவ_எழுத்து_எண்ணிக்கைகள்: Int? = try! வரிவடிவ_எழுத்து_எண்ணிக்கைகள்()
	let பெயர்_எழுத்துகளின்_குறியீடுகள்: CountableRange? = try! எழுத்துகளின்_குறியீடுகள்()
	let பெயரின்_எண்ணிக்கைகள்_வரிசையின்_சாவிகள்: [Character]? = try! எண்ணிக்கைகள்_வரிசையின்_சாவிகள்()
	let பெயரின்_எண்ணிக்கைகள்_வரிசையின்_தொடர்புடைய_மதிப்புகள்: String? = try! எண்ணிக்கைகள்_வரிசையின்_தொடர்புடைய_மதிப்புகள்()
	let பெயரின்_எண்ணிக்கைகள்_வரிசையின்_சாவிகள்_சேர்ந்த_உய்ன்ட்32_வின்_மதிப்புகள்: [String]? = try! எண்ணிக்கைகள்_வரிசையின்_சாவிகள்_சேர்ந்த_உய்ன்ட்32_வின்_மதிப்புகள்()
  
	func அகராதி_வரையறை() -> ([String:String],[String:String],[String:String],[String:String]) {
		let கீழ்_வரம்பு = பெயர்_எழுத்துகளின்_குறியீடுகள்!.lowerBound
		let மேல்_வரம்பு = பெயர்_எழுத்துகளின்_குறியீடுகள்!.upperBound
		var எண்ணிக்கைகளின்_வரிசை_குறியீடுகள் : Int = 0
		var அகராதி_உள்ளீடுகள் = (["": ""],["": ""],["": ""],["": ""])
		let தொடர்புடைய_மதிப்புகள் = பெயரின்_எண்ணிக்கைகள்_வரிசையின்_தொடர்புடைய_மதிப்புகள்
		for எண்ணிக்கைகள் in கீழ்_வரம்பு..<மேல்_வரம்பு {
			let வரிசை_குறியீடுகள் = பெயரின்_எண்ணிக்கைகளின்_வரிசை.map({$0})
			let சாவிகள்_சேர்ந்த_உய்ன்ட்32_வின்_மதிப்புகள் = பெயரின்_எண்ணிக்கைகள்_வரிசையின்_சாவிகள்_சேர்ந்த_உய்ன்ட்32_வின்_மதிப்புகள்.map({$0})
			if எண்ணிக்கைகள் == வரிசை_குறியீடுகள்!.startIndex {
				வரிசை_குறியீடுகள்!.index(after: (எண்ணிக்கைகள்)).advanced(by: 1)
				let குறியீடுகள் = வரிசை_குறியீடுகள்!.map({$0.description})
				சாவிகள்_சேர்ந்த_உய்ன்ட்32_வின்_மதிப்புகள்!.index(after: (எண்ணிக்கைகள்)).advanced(by: 1)
				let மதிப்புகள் = சாவிகள்_சேர்ந்த_உய்ன்ட்32_வின்_மதிப்புகள்!.map({$0.description})
				repeat {
					எண்ணிக்கைகளின்_வரிசை_குறியீடுகள் += 1
					அகராதி_உள்ளீடுகள் = (
						["சாவி:": String.init([குறியீடுகள்].description)],
						["தொடர்புடைய_மதிப்பு:": தொடர்புடைய_மதிப்புகள்!.description],
						["குறியீடுகள்:": எண்ணிக்கைகளின்_வரிசை_குறியீடுகள்.description],
						["சாவி_சேர்ந்த_உய்ன்ட்32_வின்_மதிப்பு:": மதிப்புகள்.debugDescription]
					)
				} while எண்ணிக்கைகள் == வரிசை_குறியீடுகள்?.endIndex
			}
		}
		return அகராதி_உள்ளீடுகள்
	}
	}

func பெறு_என்_பெயர்() throws -> String? {
	let என்_பெயர்: String? = "சண்முகசுந்தரம் பாலசுப்ரமணியன்"
	return என்_பெயர்
}
func எண்ணிக்கைகளின்_வரிசை() throws -> [UnicodeScalar]? {
	return Array(try பெறு_என்_பெயர்()!.unicodeScalars)
}
func வரிவடிவ_எழுத்து_எண்ணிக்கைகள்() throws -> Int {
	return (try பெறு_என்_பெயர்()!.unicodeScalars).count
}
func எழுத்துகளின்_குறியீடுகள்() throws -> CountableRange<Int> {
	return try எண்ணிக்கைகளின்_வரிசை()!.indices
}
func எண்ணிக்கைகள்_வரிசையின்_சாவிகள்() throws -> [Character]? {
	let சாவிகள்_வரிசை: [Character] = [(try பெறு_என்_பெயர்()?.first.map{$0})!]
	return சாவிகள்_வரிசை
}
func எண்ணிக்கைகள்_வரிசையின்_தொடர்புடைய_மதிப்புகள்() throws -> String {
	var தொடர்புடைய_மதிப்புகள் = ""
	let வரிசையின்_தொடர்புடைய_மதிப்புகள் = try! எண்ணிக்கைகளின்_வரிசை()?.lazy.map {$0}.debugDescription //எண்ணிக்கைகளின்_வரிசை()
	var எண்ணுவதற்குப்_பயன்படுத்தப்படும்_ஒரு_கருவி: Int = 0
	repeat {
		தொடர்புடைய_மதிப்புகள்.append(வரிசையின்_தொடர்புடைய_மதிப்புகள்!.description)
		எண்ணுவதற்குப்_பயன்படுத்தப்படும்_ஒரு_கருவி += 1
	} while வரிசையின்_தொடர்புடைய_மதிப்புகள்?.count == எண்ணுவதற்குப்_பயன்படுத்தப்படும்_ஒரு_கருவி
	return தொடர்புடைய_மதிப்புகள்
}
func எண்ணிக்கைகள்_வரிசையின்_சாவிகள்_சேர்ந்த_உய்ன்ட்32_வின்_மதிப்புகள்() throws -> [String] {
	var உய்ன்ட்32_வின்_மதிப்புகள் = [""]
	let உய்ன்ட்32_வின்_தொடர்புடைய_மதிப்புகள் = try! எண்ணிக்கைகளின்_வரிசை()
	var எண்ணுவதற்குப்_பயன்படுத்தப்படும்_ஒரு_கருவி: Int = 0
	for மதிப்புகள் in உய்ன்ட்32_வின்_தொடர்புடைய_மதிப்புகள்! {
		repeat {
			எண்ணுவதற்குப்_பயன்படுத்தப்படும்_ஒரு_கருவி += 1
			உய்ன்ட்32_வின்_மதிப்புகள்.append(String.init(மதிப்புகள்.value))
		} while உய்ன்ட்32_வின்_தொடர்புடைய_மதிப்புகள்!.count-1 == எண்ணுவதற்குப்_பயன்படுத்தப்படும்_ஒரு_கருவி-1
	}
	உய்ன்ட்32_வின்_மதிப்புகள்.removeFirst()
	return உய்ன்ட்32_வின்_மதிப்புகள்
}
let E = துள்ளி_வரும்_தாய்_மொழி().அகராதி_வரையறை()
print("\(E.0):\(E.1):\(E.2):\(E.3)")



